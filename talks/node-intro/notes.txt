Introduction to Node.js

- Welcome

- About Me

- Goals
-- Establish what Node is about
-- Try it yourself
-- Walkthrough of Beta.hop.ie (screenshot)

- What Node.js is



- Non-blocking
Just to set the scene a bit, I'd like to explain a little about what non-blocking means and why it's important to understanding why Node works the way it does. 

Here's a comparison that Ryan Dahl first showed, and is part of Jeff Kunkle's great video, that sets the stage for what Node tries to solve.

The numbers here don't matter too much, but the proportion between them does. What it says here, is that level 1 and 2 caches, the path for data that is closest to the CPU, happen over an order of magnitude faster than RAM, and millions of times faster than reading from a disk. Network calls can vary but they're orders of magnitude slower again.

The main aim of Node is to create a way of processing and handling requests that avoids the delays caused by these slower I/O operations. These operations take a long time, in CPU's timescale, and result in a lot of idle processor time.

Without getting to deep into the technical details, Jeff's video goes into it in more detail, here's how I try to picture it.

- Merry go-round illustration illustrating a blocking process (one person on the go round at a time) queue on one side, toilets on the other
Imagine some eccentric millionaire decided to build a fun park. In a fit of insanity, he put the entrance to the toilets on the other side of a Merry-Go-Round. He also sets up some rules. First rule, only one person on the merry go round at a time.

What happens is, a queue forms in front of the merry go round here. One person gets on at a time. Now, they may not need to go to the toilet, so in that case they go around, ignore the toilet, and get off back at the start. The next person gets on. This person's been taking advantage of the free burritos. He's wise enough to get off on the other side and make for the toilets. What happens now is that the merry go round has to sit empty, waiting for his toilet session to finish. Eventually, he emerges, sweating and climbs back onto the merry go round to finish the journey.

So, the eccentic old guy thought, hey, not enough people are getting through. Let's build 4 of them. So they ran 4 merry go rounds at the same time. Massive investment of resources both building and manning these merry go rounds, and sure, 4 times as many people could get through. But each merry go round was spending a lot of time empty. The owner may be eccentric but he wanted to turn a profit.

- Merry go-round illustration illustrating non-blocking (one person on the go round at a time) queue on one side, toilets on the other, busy

So he changes the rules. Instead of limiting the number of people to 1, he let the merry go round fill up. Now, the free burrito stand is still giving them away hand over fist, so there are a lot of people looking to get to the toilets. However this time, instead of having the entire merry go round sit empty while people are making use of them, the spaces these people leave are filled by more people. Some of them might also need to go, but the system isn't waiting for them to return.

When they've finished in the toilets, people returning jump on the nearest free seat. As you can see here, the result is just one merry go round in action, but it gets shit done.

- JavaScript

V8 (picture of tomato juice)

If you dislike JavaScript, you won't like Node. All development is in JavaScript. If on the other hand, you find JavaScript easier and more pleasant to work with than some of the other back-end languages, such as PHP or Ruby, then you might just find Node a great way to get things up and running quickly.

Personally I've gone through the transition of starting off in graphics and design, spending a long time messing with PHP, and more recently, a bit of Ruby. Along the way I've been using JavaScript for a fair amount of front-end flashy stuff. However when I started using JavaScript on the back end too, it felt like a massive weight lifted. I could now work with data on the back-end, send it through Ajax requests to front end code, and have it all feel seamless and light.

Coding for me is most fun when I can get the back-end, functional stuff up and running quickly, and get to the messing around with the front-end CSS and HTML more quickly. It gets me to the point where I can see something happening, and that helps me be creative.

- What sort of apps is Node for?
(Picture of Node with the distributed dots and lines in background)
-- Small, distributed functionality
-- Not just web facing!

So, what sort of apps would you want to build with Node? The way it works within a single thread is a hint here. Since it's not designed to multi-thread (at least not by default), it's best suited to light, small apps. Long running, CPU-heavy apps would block the single thread, so it's best to avoid anything that needs to hog the CPU.

The best sort of structure for Node apps is lots of small apps that work in parallel or pass data around as needed.

Something to bear in mind also, is that even though my own use of Node is very much from the perspective of building web-facing apps, it's not limited to this. You can use Node for all sorts of stuff. It's a framework that allows you to easily build quite low-level applications. I've seen it used in all sorts of applications, from powering a text editor, controlling remote control helicopters, even driving the front-end of a set-top box.

Node's framework is flexible, lightweight, and suited to building all sorts of cool things. The reason it stays so versatile without becoming bogged down in code is the way it uses packages.

- Packages / Modules (NPM)

Node without packages is basically a wrapper around the V8 JavaScript processing engine, with a few libraries to handle low-level system stuff. If you want to start using it for anything really interesting, you have two choices. Either write the functionality from scratch, or make use of the thousands of packages available.

I'd recommend the second option.

These packages cover everything from the essential "http" module to database management tools, tools to help grab data from external APIs and all sorts of cool stuff. They can be very simple, mapping Mime-types, to the complex, such as building full web-facing apps.

I don't like to reinvent the wheel when it comes to setting up projects, working with databases and other sources of data, and Node's community-created packages make it a genuine pleasure getting things done.

- Events & Nesting

Time for some practical stuff. You may have read or heard that Node works around an event-driven model. This is something I've had to adjust to, it's quite different from the programming style I'd been used to with PHP and Ruby. Let's compare a couple of code examples.

(Left: Sequential ordering of commands including a database query)
(Right: Similar job handled with JS using callbacks)

On the left here we have a code example using PHP. It might be familiar to some. What it's doing is [TODO].

On the right we have a similar example, but this is written in JavaScript. 

- Routing vs. Files


- Hello World example



- Practical / Workshop
* Set up local laptop as Ad-hoc network with demo code running locally, plus a download page for getting install files *
Exercise 1: Hello world
Step 1: Install Node.js (http://my_ip_address:3000/download to get the files)
Step 2: Create new app.js file
Step 3: Require http module
Step 4: Set up createserver on port 4000
Step 5: Have it respond with "Hello world" text

Exercise 2: Solve a problem yourselves (in pairs if you like)
- Decide on a problem
- Yes there's an exam
- Get people's IP addresses and show the output on screen
- Ask them to talk about how they found the experience

- Back to slides

It's getting late, and I know you're all mad keen to get around the corner here for a pint, so I'll just go through these quickly.

- Case Study: Music.Hop.ie
As an example of how Node can be a great way to build something quickly, here's a website I built recently as a small evening project. Feel free to grab the code and go through it at home. You can download it locally from this machine as a ZIP file, or find it on Github. Here are the URLs.

Alright, everyone got a chance to take down those URLs? Don't forget, these slides are online so you can always go back over them and grab whatever resources you want later.

- Music.Hop.ie structure

- Site structure: Express

The starting point for a web app like this has got to be Express. Going through how this works would be a talk in itself, but it's totally worth getting used to. It's a lightweight web app framework that models itself on how Sinatra works in the Ruby world. It gives you a start on the app structure, with views, static file handling, and templating.

Here's how the file structure looks. (Shift to text editor, highlight file column.)

- Templates & Stylesheets

Jade (http://jade-lang.com/) works out of the box with Express. Not limited to this.

Stylus (http://learnboost.github.com/stylus/docs/js.html) is a wonderful CSS pre-processor. Has anyone here used SASS or Less? It's similar that those. For those that haven't, CSS pre-processors are ways of creating great CSS while keeping it maintainable, and extendible. 

- Hosting on Ubuntu with Nginx

- Debugging tips

- Still interested? Watch Jeff's video:

http://www.youtube.com/watch?v=L0pjVcIsU6A

- Resources
Find Node Packages: nodezoo
Express app tutorial: http://clock.co.uk/tech-blogs/a-simple-website-in-nodejs-with-express-jade-and-stylus
Control presentations using remote device: http://dfcb.github.com/controldeck.js/
Node app hosting (free for small apps DB): http://appfog.com
Stackoverflow
Follow Node.js on twitter

- Feedback / Questions
Put up a live stream that people can add questions to, live.
OR A VOTE! Did this talk:
a) Rock b) Suck
with Live updated tallies.

