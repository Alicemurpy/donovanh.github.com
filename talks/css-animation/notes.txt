CSS Talk plan

Intent:

- Explore the use of animation as a means of improving website UI
Steps needed

- What is design, in the context of website UI
-- Conveying information / Branding / Interaction
- How can animation help
-- Suggesting importance / Adding character / Affordance / More than just shiny!





- Welcome slide

- Title slide + animation

- JavaScript & Animation
-- Many people got into JS through using it to perform simple display modification. Change image on hover, animating an element around the screen, and when jQuery and the like brought us easy to set up carousels, accordions and all sorts of ways to make a page dynamic.
-- Example of JS hover & accordion effect on hover
-- Include jQuery/JS code showing the technique

- CSS
-- CSS is more commonly used for describing how things look on the screen. Fonts, colours, layouts. It's always been able to provide means of visual changes using the :hover state. However it's possible to build on this using more advanced techniques to create impressive, and more importantly, useful transitions on the page.

- Why Animate?
-- Animation can look great. But, animation isn't just about making designs "pop". It can have practical uses, making interactions easier and more meaningful. When a block of content slides into the screen, we're programmed to notice. Using animation to change the state of something on the screen is much easier to notice than a sudden state change. Showing content sliding out of another area can draw attention to the content's source, and by implication can help illustrate a page's structure. 
-- Example of some content animating out from a div, showing secondary content

- Character
-- We live in a world where everything physical moves and reacts in predictable ways. We can tap into these learned associations by creating content that emulates some of these ideas. It stimulates our imagination and gives extra depth and character to what would otherwise be static and less interesting.
-- Example: looped bouncer

- Why not JavaScript?
-- It's possible to do all sorts of careful DOM manipulation with JS, but the main argument for moving the animations and transitions layer to CSS is that it's closer to the hardware. CSS is able to make use of hardware acceleration, and can result in smoother transitions on smaller devices such as phones. As well as this, CSS has been introducing several powerful tools to manupulate how things move and transition on screen.
-- One thing though; I'm not advocating ditching JS in favour of CSS only. JavaScript does things CSS cannot, such as attaching event listeners. These work well when used to add or remove classes from page elements, and use CSS to handle the visual changes.
-- Slide contents: Hardware acceleration
-- Built-in features: Transitions, Translate3D, Canvas
-- Use JavaScript too

- Performance example
-- Show two moving items, one with JS and one with CSS. Load it up until the CSS shines.

- CSS Transitions
-- "CSS Transitions allow property changes in CSS values to occur smoothly over a specified duration. This smoothing animates the changing of a CSS value when triggered by a mouse click, focus or active state, or any changes to the element (including even a change on the elementâ€™s class attribute)."
-- Examples of moving stuff around screen
-- Example of button that changes shape / colour and adds caption on hover
-- Example of a button that animates background image and moves text away on hover to describe its purpose

- Translate3D
-- Slide: 3D positioning used on beta.hop.ie

- Canvas
-- Canvas is used to draw graphics on the page programatically. You can so some crazy stuff with it, loads of examples are available online. A handy tool is EaselJS, they have some interesting demos on the site, such as a fully working implementation of Asteroids. 
-- Slide: Screenshot of the embed.js Asteroids game and link to http://www.createjs.com/#!/EaselJS

- Crazy shit
-- Find some crazy example

- CSS illustrations
-- Show duck example

- Keyframe Animation
-- Hop.ie logo example
-- Explain the process of making the CSS-only logo on hop.ie
-- Slide: hopper looped

- Hopper Keyframes
-- Illustration showing the div components, and a zig-zag line with ghosted versions at each keyframe. Put code beneath each keyframe.

- Compatibility
-- Modernizr.js
-- Describe how the hopper is pretty much broken in many browsers. Opera, Firefox and Safari have their own quirks, but the biggest one to be aware of is any version of Internet Explorer prior to v9 or 10. Rather than detect browser vendor and present different content, I'm using modernizr to detect the browser's capability. When the page loads, the Modernizr JS detects whether the browser can support animation, and adds a class to the head of the document. The CSS then shows the animated area if this class is available, otherwise it uses a background PNG.
-- It's important to keep fallbacks in mind when using CSS transitions. It's often a judgement call though. When animation is used to provide, like in the hopper example, entertainment value only, then it's not such a big deal if it doesn't work in older browsers. However if you're using animation to draw attention to elements or provide usability benefits, it might be worth looking into using some better supported CSS properties as a fallback.
-- Support is pretty good: Depending on your audience, transitions might be perfectly good to use. However there will always be larger organisations, or in some cases geographical requirements that impact whether you'll want to rely on a modern CSS3 technique, but as front end engineers that's an ongoing consideration. Over the next few years we'll see less of IE8 and the likes, but we'll also need to be aware of how people use phones on mobile devices. But that's another talk.

- Real-world use
-- Screenshot of converser.io maker with link
-- Open converser maker example in new tab. Describe what the page attempts to do. Those that were at my Angular talk might recognise this example. It's the interace we've built at Converser to help people create in-app conversations. We've added some new stuff since the last time, and we make use of CSS transitions all over the place. I'll walk through a few examples of how transitions are used to make the experience more enjoyable for the user.
-- Add / remove content - describe the add button animation and how it's transition draws attention to it. The content adding / removing helps describe what's going on visually.
-- Phone modes - transition between iPhones and S3. The background image, dimensions, colours and borders all transition. It wouldn't be possible to do all this with just JavaScript. However JS is used in part, handling the adding / removing of the classes from the DIVs.

- Summary
-- CSS transitions and animations are smooth, backed up by hardware support, and contain a growing set of features that make them useful across wider applications. Plus, maybe it's just me but I feel better moving display concernssuch as transitions and on-screen movement into the CSS. It feels like the right place.
-- Slide: Hardware acceleration / Powerful tools / Browser support is getting there

- Further reading
-- Links:
-- UI Transitions: http://www.ui-transitions.com/
-- LukeW Notes on CSS3 Animations (Andy Clarke talk): http://www.lukew.com/ff/entry.asp?1354
-- Lynda.com CSS Animations course: http://www.lynda.com/CSS-tutorials/CSS-Animations/115434-2.html
-- Intro to CSS Animation: http://www.kirupa.com/html5/introduction_to_animation_html.htm
-- Smashing Magazine CSS Examples: http://coding.smashingmagazine.com/2012/06/21/powerful-new-cssjavascript-techniques/
-- Creative Bloq 55 examples of HTML5: http://www.creativebloq.com/web-design-tips/examples-of-html5-1233547
-- HTML5 Canvas Intro: http://www.html5canvastutorials.com/tutorials/html5-canvas-tutorials-introduction/

- The End
-- Make characters dance like at the start
-- Twitter username
-- Any questions?
-- This talk URL

SLIDES TO BUILD:






