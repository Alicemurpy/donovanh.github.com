---
layout: post
title: "Portal CSS"
description: "Lean how to set up a 3D scene in CSS, and add animation."
tags: [3D, CSS]
imageURL: portal.png
published: false
---

You don't need JavaScript to create impressive 3D projects in the web browser. In this port I will show how to create and animate a Portal-inspired scene using only CSS.

Check out the [online Portal CSS demo](http://hop.ie/)

## Portal Orientation Video No. 1

As an example to show the various stages of creating, styling and then animating a 3D scene, we'll create a scene from the [Portal Training Video](http://www.youtube.com/watch?v=gr_9Fw_gC4I). We'll create the stylised, cartoony look of the first part of the video in which a silhouetted character jumps through a portal and emerges from the other side. This is the original video:

<div class="video-wrapper">
  <iframe src="http://www.youtube.com/embed/V5paXrfkYmI" width="720" height="405" data-height="405" frameborder="0">
  </iframe>
</div>

This video blew my mind when it was first released. The isometric, cartoony graphics were such a lovely contrast to the in-game style yet still managed to nicely introduce the game. In this post I will see if this cartoony style can be reproduced using nothing but HTML and CSS.

In particular, this is the scene we will build:

<img src="http://hop.ie/images/posts/portal/video.jpg" alt="Portal video screenshot" />

### A quick note on prefixes

I've removed the prefixed versions of rules in the following CSS. I would recommend either using something like [prefix free](http://leaverou.github.io/prefixfree/) or [SASS](http://sass-lang.com/) to manage these for you. Otherwise, be aware that most browser prefixes will need to applied. Full versions of the CSS and SASS can be found [on Github](https://github.com/donovanh/portal) along with the HTML.

## Perspective

We need to set a scene in which we can build our 3D creation. To do this we'll need to use an HTML element and give it the needed properties that tell the browser to expect 3D content within it. Start with some HTML:

    <article class="container">...</article>

In this case the container is an `article` tag. In HTML5, *article* represents a standalone piece of content that could be reproduced elsewhere and still make sense.

The first property to apply is [perspective](http://docs.webplatform.org/wiki/css/properties/perspective). This property takes a value in pixels, and represents the depth of the 3D scene. A smaller value will produce a more dramatic effect, and it's usual to set it somewhere betweeh 800 and 1,200 pixels.

<img src="http://hop.ie/images/posts/portal/perspective.gif" alt="Alternating between a perspective value of 900 pixels and 2000 pixels" class="bordered centered" />

For this scene to feel like it's a large room, we will set the perspective value quite high at 2,600 pixels. Ignoring the various browser prefixes, we use the following:

    article.container {
        perspective: 2600px;
    }

### Vanishing point

The container for the scene has a depth, so the next step is to determine the viewing angle. By adjusting the [perspective-origin](http://docs.webplatform.org/wiki/css/properties/perspective-origin) property, we can establish the scene's vanishing point, and determine whether we're looking down at the object or from the side.

    .container {
      perspective-origin: 50% -1400px;
    }

The `perspective-origin` property takes two values, a horizontal and a vertical offset. In this case we're setting it half-way across the scene, and 1,400 pixels up. This will result in our point of view being above the object, looking down.

To determine these values, I adjusted the value in the Chrome web inspector panel and judged it by eye. When setting up your scene, your value might be higher or lower than this. It will depend on the effect you want to convey. Also keep in mind that this value can be animated, creating some interesting perspective-change effects.

### No vectors, Victor

The objects we position in HTML are normal HTML elements. They have a width, height, and are rectangular. This means that as you build a 3D object, you place each rectangle in place. This differs from some other methods that involve describing points and lines to create shapes. It also means that there aren't as many primatives, such as circles or teapots, to draw upon.

The HTML elements are placed within the 3D scene using the `transform` property. 

### Transformin'

The `transform` property consists of a series of adjustments to the HTML element. These adjustments can take the form of `translate` to move the element, `rotate` to adjust it's angle, `skew` and even `scale`. Each of these can be stacked to create more complex transforms, for example:

    .example {
        transform: rotateY(45deg) translateZ(-100px);
    }

This rule will rotate an element 45 degrees around the Y axis, then move it back 100 pixels on the Z axis. The effect would look like this:

<img src="http://hop.ie/images/posts/portal/transform.png" alt="A transform in action" class="bordered centered" />

### Transform origin property

When rotating elements around the place, it's worth keeping in mind that the transforms have an origin that can be set. The [transform origin](http://docs.webplatform.org/wiki/css/properties/transform-origin) is a point referred to by specifying the X, Y and Z values. This is the default:

    .default-origin {
        transform-origin: 50% 50% 0;
    }

When building this example I kept the default but it's worth knowing that it's there.

## Let's build

With the scene set, we can start putting together our 3D masterpiece. When beginning to build 3D objects with HTML and CSS, it's worth taking a moment to understand how this approach differs from other 3D software.

    <section class="stage">
        <div class="shadow"></div>
        <div class="back-left"></div>
        <div class="back-right"></div>
        <div class="platform-left"><span></span></div>
        <div class="platform-right"><span></span></div>
        <div class="pit-left"></div>
        <div class="pit-right"></div>
        <div class="pit-back"></div>
    </section>

The above includes a *stage* section, which we will be using to contain all the elements. A set of divs within the stage section form the main parts of the structure. They take the form of back pieces, platforms, the sides of the pit, and a shadow to place underneath them.

When I started building this scene, I tried to place the walls directly onto the stage, rotating it and adjusting its position. However since the scene is being viewed from an isometric angle, an easier approach is to place the parts of the scene and then rotate the entire scene 45 degrees at once.

With that in mind, the HTML elements are transformed into place according to the following sketch:

<img src="http://hop.ie/images/posts/portal/sketch.png" alt="Plan view of the scene" class="centered" />

As the sketch shows, the *back-left* piece is aligned to the left, but the *back-right* piece is right in front of the viewer. To adjust for this, we'll rotate the entire stage 45 degrees later.

Before applying transforms however, we need to give the divs some shared properties:

    .stage div {
        position: absolute;
        transform-style: preserve-3d;
    }

Each div will be positioned absolutely, and the `transform-style` property to instruct the browser that 3D transforms are to be applied in relation to the perspective we set earlier.

With this done we can start positioning divs:

    .stage .back-left {
        width: 500px;
        height: 120px;
        background-color: #6b522b;
        transform: rotateY(90deg) translateX(-256px);
        border-top: 6px solid #8a683d;
        border-left: 6px solid #574625;
    }

The above rules describe a height of 500 pixels, which is the side length of our 3D scene, a height of 120 pixels and a light brown background colour. The div is then rotated 90 degrees and pushed back along the X axis. The div has a 6 pixel border applied to create the illusion of depth.

A similar transform is applied to the *back-right* div:

    .stage .back-left {
        width: 446px;
        height: 120px;
        background-color: #9c7442;
        transform: translateX(253px) translateZ(3px);
        border-top: 6px solid #b5854a;
        border-right: 6px solid #78552c;
    }

This div is a little smaller, as it looks like the room in the original Portal video is not quite square.

Next, add in some platforms and the sides of the pit:

    .stage .platform-left {
        width: 446px;
        height: 220px;
        background-color: #bcb3a8;
        transform: rotateX(90deg) translateY(396px) translateX(253px) translateZ(-13px);
        border-bottom: 6px solid #857964;
    }
    .stage .platform-right {
        width: 446px;
        height: 164px;
        background-color: #bcb3a8;
        transform: rotateX(90deg) translateY(88px) translateX(253px) translateZ(-41px);
        border-right: 6px solid #554c3d;
        border-bottom: 6px solid #847660;
    }
    .stage .pit-left {
        width: 447px;
        height: 800px;
        background-color: #4d4233;
        transform: translate3D(254px, 125px, 285px);
    }
    .stage .pit-right {
        width: 451px;
        height: 800px;
        top: -1400px;
        background-color: #847660;
        transform: translate3D(254px, 125px, 173px);
    }
    .stage .pit-back {
        width: 170px;
        height: 220px;
        background-color: #6b522b;
        transform: rotateY(90deg) translate3D(-200px, 87px, 168px);
    }

The end result of all this should be a scene that looks like this:

<img src="http://hop.ie/images/posts/portal/layout01.png" alt="Initial layout of the stage divs" />

It doesn't look right yet. We need to rotate the entire scene to see it properly. Add a `transform` to the *scene* section:

    .stage {
        width: 460px;
        margin: 0 auto;
        transform-style: preserve-3d;
        transform: rotateY(-45deg);
    }

The result should look more like this:

<img src="http://hop.ie/images/posts/portal/layout02.png" alt="Initial layout rotated to show the stage properly" />

You may notice that the borders create a nice depth effect, particularly at the corners, where the different coloured borders meet with a 45 degree angle. Since the scene we're building is to be viewed at 45 degrees, this effect works to our advantage in most cases. A few of the corners don't quite look right, but considering how straightforward the borders are to apply, and the lack of images, I feel this is a reasonable compromise.

### In the shade

The video features a nice shadow beneath the platforms. We can reproduce this using the CSS `box-shadow` property.

    .stage .shadow {
        width: 550px;
        height: 550px;
        background-color: transparent;
        transform: rotateX(90deg) translateZ(-166px) translateX(550px);
        box-shadow: -600px 0 50px #afa79f;
    }

The rules above add a box shadow to the *shadow* div, which is itself transparent. The box shadow is offset by 600 pixels so that the actual *shadow* div doesn't get in the way of the shadow. The whole lot is rotated and positioned off-stage, so that only the shadow part is visible on the stage. The result should be something like this:

<img src="http://hop.ie/images/posts/portal/layout03.png" alt="Initial layout with a shadow" />


## Red VS Blue

Next up we need to add some decoration and the glowing portals.

<img src="http://hop.ie/images/posts/portal/portal.png" alt="Red portal" />

The HTML needed for the two portals is simple enough:

    <div class="portal red"></div>
    <div class="portal blue"></div>

There is a `div` for each of the two portals, one red and the other blue. They both have a similar style, with gradients used to create glowing effect. Since they are only one HTML element, the CSS includes a pseudo-selector we can style to achieve the full effect.

The first step is to establish the general portal shape:

    .stage .portal {
        width: 48px;
        height: 72px;
        background-color: black;
        border-radius: 44px/62px;
        box-shadow: 0 0 15px 4px white;
    }

This sets up the portal and uses the `border-radius` property to create an oval shape, and a white box shadow creates a glow. A pseudo-selector is then added that has similar dimensions, and the white border: 

    .stage .portal:before {
        content: "";
        display: block;
        width: 48px;
        height: 72px;
        border: 4px solid white;
        border-radius: 44px/62px;
        margin-top: -4px;
        margin-left: -4px
    }

So far these styles have both applied to portals in general. Since one is red and the other blue, we'll use separate sets of CSS rules to describe the characteristics specific to each. Firstly, the red portal:

    .stage .portal.red {
        background: radial-gradient(#000000, #000000 50%, #ff4640 70%);
        border: 7px solid #ff4640;
        transform: translate3D(223px, 25px, 385px) rotateY(90deg) skewX(5deg);
    }
    .stage .portal.blue {
      background: radial-gradient(#000000, #000000 50%, #258aff 70%);
      border: 7px solid #258aff;
      transform: translate3D(586px, 25px, 4px) skewX(-5deg);
  }

The red portal is given a background [radial gradient](http://docs.webplatform.org/wiki/css/functions/radial-gradient) and a red border. The transform in this case rotates it and places it on the left wall. The blue portal is similar but has a blue gradient applied and is positioned on the right wall. Both looked a little off in testing, so I added a 5 degree skew effect that seemed to make them look a little better.

### Portal glow 

The HTML we added earlier included a `span` tag within each of the two platforms. These spans were added so that they could be styled with a radial gradient to provide a glowing effect beneath each portal.

    .stage .platform-left span {
        display: block;
        position: absolute;
        width: 120px;
        height: 200px;
        left: 0;
        background: radial-gradient(left, #f3cac8, #c8b8ad 70px, #bcb3a8 90px);
    }
    .stage .platform-right span {
        display: block;
        position: absolute;
        width: 150px;
        height: 60px;
        left: 280px;
        background: radial-gradient(top, #cdebe8, #c2cbc1 40px, #bcb3a8 60px);
    }

The two spans are positioned absolutely and given a red and blue gradient, positioned beneath each of the portals. A pseudo-selector could have been used to achieve this effect, but since animating pseudo-selectors is not well supported (even within versions of Webkit), a separate span is used in this case.

### Adorable

One of the unexpected successes was the use of borders to create what looks like an opening in the right wall, representing the exit. To create this door I use a single div and some coloured borders that make it look like it's inset.

<img src="http://hop.ie/images/posts/portal/door.png" alt="Door" />

The door HTML is straightforward. Add the following within the *stage* section.

    <div class="door"></div>

Styling the door involves a few borders and then a transform that positions it in front of the right wall:

    .stage .door {
        width: 65px;
        height: 85px;
        background: #efe8dd;
        border-bottom: 6px solid #bcb3a8;
        border-left: 7px solid #78552e;
        transform: translate3D(450px, 34px, 4px);
    }

Two borders are used to create the effect. The bottom and left borders match the platform and the side of the right wall, giving the impression of depth. Since there is no top border specified, the left border stops flush with the top of the div, which in this case works well.




## Adding character(s)

With the portals and door in place, we need a person to jump through one and arrive on the other side.

### First dude

<img src="http://hop.ie/images/posts/portal/dude1.png" alt="The first of two characters to animate through the scene" />

### Second dude

<img src="http://hop.ie/images/posts/portal/dude2.png" alt="The second of two characters to animate through the scene" />


## Add some animation

- Animating the objects
-- Keyframes
-- Animation 
-- Animation-delay


## Narbacular results

## Caveats

## Download and / or contribute


